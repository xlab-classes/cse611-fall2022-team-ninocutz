from flask import request
from flask import Blueprint
from flask_jwt_extended import jwt_required
from flask_cors import cross_origin
from domain import notificationsDomain
from utils.authUtil import getUserId

notifications_blueprint = Blueprint('notifications_blueprint', __name__)


@notifications_blueprint.route("/notifications", methods=['POST'])
@jwt_required()
@cross_origin()
def addNotification():
    """
    An API that add a notification template to the DB
    ---
    parameters:
       - name: notificationType
         in: request
         type: string
         required: false
       - name: notificationTemplate
         in: request
         type: string
         required: false
    responses:
        201:
            description: An autogenerated notification id
            schema:
                id: id
                properties:
                    id:
                        type: int
                        description: The id of the notification template
                        default: None           
    """    
    userId = getUserId()
    data = request.get_json()
    notificationType = data.get('notificationType', '')
    template = data.get('notificationTemplate', '')

    notificationId = notificationsDomain.insertNotification(
        notificationType, template, userId)

    return {'id': notificationId}, 201


@notifications_blueprint.route("/notifications", methods=['GET'])
@jwt_required()
@cross_origin()
def getAllNotifications():
    """
    An API that returns all the notifications from the DB
    ---
    responses:
        200:
            description: A list of all the notifications from the DB
            schema:
                id: notifications
                properties:
                    notifications:
                        type: list
                        description: List of all the notifications from the DB
                        default: None           
    """       
    notifications = notificationsDomain.getAllNotifications()
    return {'notifications': notifications}, 200


@notifications_blueprint.route("/notifications", methods=['PUT'])
@jwt_required()
@cross_origin()
def updateNotification():
    """
    An API that modifies a notification template in the DB
    ---
    parameters:
       - name: notificationType
         in: request
         type: string
         required: false
       - name: notificationTemplate
         in: request
         type: string
         required: false
       - name: id
         in: request
         type: int
         required: false    
    responses:
        204:
            description: Successfully updated the Notification
    """       
    data = request.get_json()
    id = data.get('id', '')
    userId = getUserId()
    notificationType = data.get('notificationType', '')
    template = data.get('notificationTemplate', '')
    updated = notificationsDomain.updateNotification(
        id, notificationType, template, userId)

    if updated:
        return 'Successfully updated the Notification', 204
    return 'Error encountered during Notification update', 500


@notifications_blueprint.route("/notifications/<id>", methods=['DELETE'])
@jwt_required()
@cross_origin()
def deleteNotification(id):
    """
    An API that deletes a notification by id
    ---
    parameters:
       - name: id
         in: query
         type: int
         required: true    
    responses:
        204:
            description: Successfully deleted the Notification  
    """     
    deleted = notificationsDomain.deleteNotification(id)

    if deleted:
        return 'Successfully deleted the Notification', 204
    return 'Error encountered during deletion of Notification', 500
