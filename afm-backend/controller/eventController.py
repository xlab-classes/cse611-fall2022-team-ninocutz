import os
from flask import Blueprint
from flask_jwt_extended import jwt_required
from flask_cors import cross_origin
from flask import request
from domain import eventsDomain
from domain import imagesDomain
from domain import socialmediaDomain
from model.EventModel import EventModel
from utils.authUtil import getUserId
from utils.generalUtil import getBoolValue

events_blueprint = Blueprint('events_blueprint', __name__)
IMAGE_LOCATION = os.environ.get("IMAGE_LOCATION")

# region Future Events


@events_blueprint.route("/event", methods=['POST'])
@jwt_required()
@cross_origin()
def createEvent():
    """
    An API that creates an event
    ---
    parameters:
       - name: file
         in: request
         type: file
         required: false
       - name: eventName
         in: request
         type: string
         required: true
       - name: eventType
         in: request
         type: string
         required: true
       - name: longitude
         in: request
         type: float
         required: true   
       - name: latitude
         in: request
         type: float
         required: true     
       - name: zipCode
         in: request
         type: int
         required: true   
       - name: address
         in: request
         type: string
         required: true                                 
       - name: message
         in: request
         type: string
         required: false
       - name: eventTimeSlot
         in: request
         type: string
         required: true                   
       - name: eventDate
         in: request
         type: string
         required: true   
       - name: postToInstagram
         in: request
         type: boolean
         required: false                   
       - name: postToFacebook
         in: request
         type: boolean
         required: false            
       - name: postToTwitter
         in: request
         type: boolean
         required: false  
       - name: facebookToken
         in: request
         type: string
         required: false                     
    responses:
        201:
            description: An autogenerated event id
            schema:
                id: id
                properties:
                    id:
                        type: int
                        description: The id of the event created
                        default: None           
    """    
    userId = getUserId()
    newEvent = EventModel(name=request.form.get('eventName'),
                          eventType=request.form.get('eventType'),
                          longitude=request.form.get('longitude'),
                          latitude=request.form.get('latitude'),
                          zipCode=request.form.get('zipCode'),
                          address=request.form.get('address'),
                          message=request.form.get('message', None),
                          eventTimeSlot=request.form.get('eventTimeSlot'),
                          eventDate=request.form.get('eventDate')
                          )
    postToInstagram = getBoolValue(request.form.get('postToInstagram', False))
    postToFacebook = getBoolValue(request.form.get('postToFacebook', False))
    postToTwitter = getBoolValue(request.form.get('postToTwitter', False))

    if postToInstagram or postToFacebook:
        facebookToken = request.form.get('facebookToken', '')

    if 'file' in request.files:
        file = request.files['file']
        imageType = request.args.get('image_type', None)

        urlResult = imagesDomain.saveImageAndUploadToAws(file)
        if not isinstance(urlResult, str):
            return urlResult

        imageId = imagesDomain.add_image(imageType, urlResult, userId)
        newEvent.imageId = imageId

    createEventId = eventsDomain.createEvent(newEvent, userId)

    if postToInstagram and 'file' in request.files:
        socialmediaDomain.postToInstagram(
            facebookToken, urlResult, newEvent.message)
    if postToFacebook and 'file' in request.files:
        socialmediaDomain.postToFacebook(
            facebookToken, urlResult, newEvent.message)
    if postToTwitter and 'file' in request.files:
        savedFilePath = IMAGE_LOCATION + "/" + urlResult.split('/')[-1]
        socialmediaDomain.postToTwitter(savedFilePath, newEvent.message)

    return {'id': createEventId}, 201


@events_blueprint.route("/event/future", methods=['GET'])
@cross_origin()
def getAllFutureEvents():
    """
    An API that returns all the future events stored in the DB
    ---
    responses:
        200:
            description: A list of future events in the database
            schema:
                id: events
                properties:
                    events:
                        type: list
                        description: List of events in the DB
                        default: None           
    """       
    events = eventsDomain.getAllFutureEvents()
    return {'events': events}, 200


@events_blueprint.route("/event/future/<id>", methods=['GET'])
@cross_origin()
def getEventById(id):
    """
    An API that returns an event by id
    ---
    parameters:
       - name: id
         in: query
         type: int
         required: true    
    responses:
        200:
            description: Event details of the requested id
            schema:
                id: event
                properties:
                    events:
                        type: dict
                        description: Event details in the DB
                        default: None           
    """      
    event = eventsDomain.getEventById(id)
    return {'events': event}, 200

# endregion Future Events

# region Current Events


@events_blueprint.route("/event/current", methods=['GET'])
@cross_origin()
def getCurrentEvent():
    """
    An API that returns the current ongoing event
    ---
    responses:
        200:
            description: Event details of the current event
            schema:
                id: event
                properties:
                    events:
                        type: dict
                        description: Event details in the DB
                        default: None           
    """      
    events = eventsDomain.getCurrentEvent()
    return {'events': events}, 200


@events_blueprint.route("/event/current", methods=['POST'])
@jwt_required()
@cross_origin()
def addCurrentEvent():
    """
    An API that creates a current event
    ---
    parameters:
       - name: eventName
         in: request
         type: string
         required: true
       - name: eventType
         in: request
         type: string
         required: true
       - name: longitude
         in: request
         type: float
         required: true   
       - name: latitude
         in: request
         type: float
         required: true     
       - name: zipCode
         in: request
         type: int
         required: true   
       - name: address
         in: request
         type: string
         required: true                                 
       - name: message
         in: request
         type: string
         required: false
       - name: eventTimeSlot
         in: request
         type: string
         required: true                   
       - name: eventDate
         in: request
         type: string
         required: true   
       - name: emailTrigger
         in: request
         type: boolean
         required: false                   
       - name: smsTrigger
         in: request
         type: boolean
         required: false                            
    responses:
        201:
            description: An autogenerated event id
            schema:
                id: id
                properties:
                    id:
                        type: int
                        description: The id of the event created
                        default: None           
    """        
    userId = getUserId()

    newEvent = EventModel(name=request.form.get('eventName'),
                          eventType=request.form.get('eventType'),
                          longitude=request.form.get('longitude'),
                          latitude=request.form.get('latitude'),
                          zipCode=request.form.get('zipCode'),
                          address=request.form.get('address'),
                          message=request.form.get('message'),
                          eventTimeSlot=request.form.get('eventTimeSlot'),
                          eventDate=request.form.get('eventDate')
                          )

    emailTrigger = getBoolValue(request.form.get('emailTrigger', False))
    smsTrigger = getBoolValue(request.form.get('smsTrigger', False))
    # TODO: Check if image is needed

    createdCurrentEventId = eventsDomain.createCurrentEvent(
        newEvent, userId, emailTrigger, smsTrigger)
    return {'id': createdCurrentEventId}, 201

# endregion Current Events


# region Past Events
@events_blueprint.route("/event/past", methods=['GET'])
@cross_origin()
def getAllPastEvents():
    """
    An API that returns all the past event from the DB
    ---
    responses:
        200:
            description: A list of past events in the database
            schema:
                id: events
                properties:
                    events:
                        type: list
                        description: List of past events in the DB
                        default: None           
    """           
    events = eventsDomain.getAllPastEvents()
    return {'events': events}, 200
# endregion Past Events


@events_blueprint.route("/event/<event_id>", methods=['DELETE'])
@jwt_required()
@cross_origin()
def delete_event(event_id):
    """
    An API that deletes an event by id
    ---
    parameters:
       - name: id
         in: query
         type: int
         required: true    
    responses:
        204:
            description: Successfully deleted the event          
    """     
    if not event_id:
        return 'No event id provided', 400
    events = eventsDomain.delete_event(event_id)
    if events:
        return 'Successfully deleted the event', 204
    return 'Error encountered during event deletion', 500


@events_blueprint.route("/event", methods=['PUT'])
@jwt_required()
@cross_origin()
def edit_event():
    """
    An API that modifies an event
    ---
    parameters:
       - name: file
         in: request
         type: file
         required: false
       - name: eventName
         in: request
         type: string
         required: true
       - name: eventType
         in: request
         type: string
         required: true
       - name: longitude
         in: request
         type: float
         required: true   
       - name: latitude
         in: request
         type: float
         required: true     
       - name: zipCode
         in: request
         type: int
         required: true   
       - name: address
         in: request
         type: string
         required: true                                 
       - name: message
         in: request
         type: string
         required: false
       - name: eventTimeSlot
         in: request
         type: string
         required: true                   
       - name: eventDate
         in: request
         type: string
         required: true   
       - name: postToInstagram
         in: request
         type: boolean
         required: false                   
       - name: postToFacebook
         in: request
         type: boolean
         required: false            
       - name: postToTwitter
         in: request
         type: boolean
         required: false  
       - name: facebookToken
         in: request
         type: string
         required: false                     
    responses:
        204:
            description: Successfully updated the event
    """        
    userId = getUserId()
    newEvent = EventModel(name=request.form.get('eventName'),
                          eventType=request.form.get('eventType'),
                          longitude=request.form.get('longitude'),
                          latitude=request.form.get('latitude'),
                          zipCode=request.form.get('zipCode'),
                          address=request.form.get('address'),
                          message=request.form.get('message'),
                          eventTimeSlot=request.form.get('eventTimeSlot'),
                          eventDate=request.form.get('eventDate')
                          )
    event_id = request.form.get('eventId')
    if not event_id:
        return 'Event id is required', 400

    if 'file' in request.files:
        file = request.files['file']
        image_type = request.args.get('image_type', None)

        urlResult = imagesDomain.saveImageAndUploadToAws(file)
        if not isinstance(urlResult, str):
            return urlResult

        image_id = imagesDomain.add_image(image_type, urlResult, userId)
        newEvent.imageId = image_id

    event_status = eventsDomain.edit_event(newEvent, event_id, userId)
    if event_status:
        return 'Successfully updated the event', 204
    return 'Error encountered during event update', 500


@events_blueprint.route("/event-types", methods=['GET'])
@cross_origin()
def getAllEventTypes():
    """
    An API that returns all the event types supported   
    ---
    responses:
        200:
            description: A list of event types in the database
            schema:
                id: eventTypes
                properties:
                    eventTypes:
                        type: list
                        description: List of event types in the DB
                        default: None    
    """      
    eventTypes = eventsDomain.getAllEventTypes()

    return {'eventTypes': eventTypes}, 200
