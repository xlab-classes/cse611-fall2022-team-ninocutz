from flask import request
from flask import Blueprint
from domain import bookingsDomain
from flask_jwt_extended import jwt_required
from flask_cors import cross_origin
from utils.authUtil import getUserId

bookings_blueprint = Blueprint('bookings_blueprint', __name__)


@bookings_blueprint.route("/bookings", methods=['POST'])
@cross_origin()
def addBooking():
    """
    An API that creates and adds booking to the DB
    ---
    parameters:
       - name: firstName
         in: request
         type: string
         required: true
       - name: lastName
         in: request
         type: string
         required: true
       - name: numberOfPeople
         in: request
         type: int
         required: true   
       - name: bookingDate
         in: request
         type: string
         required: true     
       - name: bookingTimeSlot
         in: request
         type: string
         required: true   
       - name: address
         in: request
         type: string
         required: true                                 
       - name: zipCode
         in: request
         type: int
         required: false
       - name: emailId
         in: request
         type: string
         required: true                   
       - name: mobileNumber
         in: request
         type: int
         required: true   
                   
    responses:
        201:
            description: An autogenerated booking id
            schema:
                id: id
                properties:
                    id:
                        type: int
                        description: The id of the booking created
                        default: None           
    """        
    data = request.get_json()
    firstName = data.get('firstName', '')
    lastName = data.get('lastName', '')
    numberOfPeople = data.get('numberOfPeople', 0)
    bookingDate = data.get('bookingDate', '')
    bookingTimeSlot = data.get('bookingTimeSlot', '')
    address = data.get('address', '')
    zipCode = data.get('zipCode', '')
    emailId = data.get('emailId', '')
    mobileNumber = data.get('mobileNumber', '')

    bookingId = bookingsDomain.addBooking(
        firstName, lastName, numberOfPeople, bookingDate, bookingTimeSlot, address, zipCode, emailId, mobileNumber)
    return {'id': bookingId}, 201


@bookings_blueprint.route("/bookings", methods=['GET'])
@jwt_required()
@cross_origin()
def getAllBookings():
    """
    An API that returns all the bookings stored in the DB
    ---
    responses:
        200:
            description: A list of bookings in the database
            schema:
                id: bookings
                properties:
                    bookings:
                        type: list
                        description: List of bookings in the DB
                        default: None           
    """    
    bookings = bookingsDomain.getAllBooking()
    return {'bookings': bookings}, 200


@bookings_blueprint.route("/bookings/requested", methods=['GET'])
@jwt_required()
@cross_origin()
def getAllRequestedBookings():
    """
    An API that returns all the bookings with status as requested
    ---
    responses:
        200:
            description: A list of bookings in the database
            schema:
                id: bookings
                properties:
                    bookings:
                        type: list
                        description: List of bookings in the DB
                        default: None           
    """    
    bookings = bookingsDomain.getAllRequestedBookings()
    return {'bookings': bookings}, 200


@bookings_blueprint.route("/bookings/decline", methods=['PUT'])
@jwt_required()
@cross_origin()
def declineBooking():
    """
    An API that declines a user booking request
    ---
    parameters:
       - name: bookingId
         in: request
         type: int
         required: true    
    responses:
        204:
            description: Successfully updated the Booking          
    """      
    data = request.get_json()
    bookingId = data.get('bookingId', 0)

    userId = getUserId()

    updated = bookingsDomain.declineBooking(bookingId, userId)

    if updated:
        return 'Successfully updated the Booking', 204
    return 'Error encountered during Booking update', 500


@bookings_blueprint.route("/bookings/approve", methods=['PUT'])
@jwt_required()
@cross_origin()
def acceptBooking():
    """
    An API that accepts a user booking request
    ---
    parameters:
       - name: bookingId
         in: request
         type: int
         required: true    
    responses:
        204:
            description: Successfully updated the Booking          
    """      
    data = request.get_json()
    bookingId = data.get('bookingId', 0)
    userId = getUserId()

    updated = bookingsDomain.acceptBooking(bookingId, userId)

    if updated:
        return 'Successfully updated the Booking', 204
    return 'Error encountered during Booking update', 500


@bookings_blueprint.route("/bookings/slots", methods=['GET'])
@cross_origin()
def return_booking_slots():
    """
    An API that returns all the booking slots currently accepted
    ---
    responses:
        200:
            description: A list of accepted booking slots
            schema:
                id: bookings
                properties:
                    bookings:
                        type: list
                        description: A list of accepted booking slots
                        default: None           
    """      
    booking_slots = bookingsDomain.getBookingSlots()
    if booking_slots:
        return {'bookings': booking_slots}, 200
    return 'No bookings found', 400
