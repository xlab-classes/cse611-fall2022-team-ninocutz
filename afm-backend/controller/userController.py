from flask import request
from flask_jwt_extended import get_jwt_identity, jwt_required
from flask_cors import cross_origin
from flask import request
from flask import Blueprint
from domain import userDomain
from utils.authUtil import getUserId
from model.UserModel import UserModel
from datetime import datetime
user_blueprint = Blueprint('user_blueprint', __name__)


@user_blueprint.route("/auth", methods=["POST"])
@cross_origin()
def login():
    """
    An API to authenticate admin user
    ---
    parameters:
       - name: username
         in: request
         type: string
         required: true    
       - name: password
         in: request
         type: string
         required: true            
    responses:
        200:
            description: Access Token
            schema:
                id: access_token
                properties:
                    access_token:
                        type: string
                        description: JWT Access token
                        default: None             
    """      
    username = request.json.get("username", None)
    password = request.json.get("password", None)
    return userDomain.validate_login(username, password)


@user_blueprint.route("/reset-password", methods=["PUT"])
@jwt_required()
@cross_origin()
def reset_password():
    """
    An API to reset admin user password
    ---
    parameters:
       - name: confirmPassword
         in: request
         type: string
         required: true    
       - name: password
         in: request
         type: string
         required: true            
    responses:
        200:
            description: Password changed succesfully           
    """          
    # Assumption - right token is passed to this method
    username = get_jwt_identity()
    userId = getUserId()
    password = request.json.get("password", None)
    confirmPassword = request.json.get("confirmPassword", None)
    return userDomain.validate_reset_password(
        username, password, confirmPassword, userId)


@user_blueprint.route("/users", methods=["GET"])
@jwt_required()
@cross_origin()
def getAllUsers():
    """
    An API that returns details of all the admin users
    ---    
    responses:
        200:
            description: A list of admin users in the DB
            schema:
                id: users
                properties:
                    users:
                        type: list
                        description: List of admin users in the DB
                        default: None    
    """    
    users = userDomain.getAllUsers()
    return {'users': users}, 200


@user_blueprint.route("/forgot-password", methods=['POST'])
@cross_origin()
def forgot_password():
    """
    An API that resets a users password
    ---
    parameters:
       - name: username
         in: request
         type: string
         required: true    
    responses:
        200:
            description: Email succesfully sent
    """    
    username = request.json.get("username", None)
    return userDomain.validate_forgot_password(username)


@user_blueprint.route("/user", methods=['POST'])
@jwt_required()
@cross_origin()
def addUser():
    """
    An API that add a new admin user
    ---
    parameters:
       - name: firstName
         in: request
         type: string
         required: false   
       - name: lastName
         in: request
         type: string
         required: false   
       - name: emailId
         in: request
         type: string
         required: false   
       - name: mobileNumber
         in: request
         type: int
         required: false   
       - name: address
         in: request
         type: string
         required: false                                        
       - name: zipcode
         in: request
         type: int
         required: false          
    responses:
        200:
            description: Successfully added admin user
            schema:
                id: userId
                properties:
                    userId:
                        type: int
                        description: Autogenerated id the user created
                        default: None                
    """    

    createdBy = getUserId()
    newUser = UserModel(request.json.get("firstName", None), 
                        request.json.get("lastName", None), 
                        request.json.get("emailId", None),
                        request.json.get("mobileNumber", None), 
                        request.json.get("address"), 
                        "defaultPassword", 
                        request.json.get("zipCode"), 
                        createdBy)

    id = userDomain.addUser(newUser)

    return {'userId': id}, 200


@user_blueprint.route("/user/<userId>", methods=['DELETE'])
@jwt_required()
@cross_origin()
def deleteUser(userId):
    """
    An API that deletes an admin user by id
    ---
    parameters:
       - name: id
         in: query
         type: int
         required: true    
    responses:
        200:
            description: Successfully deleted the user          
    """      
    return userDomain.deleteUser(userId)


@user_blueprint.route("/user", methods=["PUT"])
@jwt_required()
@cross_origin()
def updateUser():
    """
    An API that modifies an admin user
    ---
    parameters:
       - name: firstName
         in: request
         type: string
         required: false   
       - name: lastName
         in: request
         type: string
         required: false   
       - name: emailId
         in: request
         type: string
         required: false   
       - name: mobileNumber
         in: request
         type: int
         required: false   
       - name: address
         in: request
         type: string
         required: false                                        
       - name: mobileNumber
         in: request
         type: int
         required: false          
    responses:
        204:
            description: User updated succesfully
    """        
    userId = getUserId()
    modifiedBy = getUserId()
    updatedUser = UserModel(request.json.get("firstName", None), 
                            request.json.get("lastName", None), 
                            request.json.get("emailId", None),
                            request.json.get("mobileNumber", None), 
                            request.json.get("address"), None, 
                            request.json.get("zipCode"), 
                            None, 
                            modifiedBy)
    return userDomain.updateUser(userId, updatedUser)


@user_blueprint.route("/user", methods=["GET"])
@jwt_required()
@cross_origin()
def getUser():
    """
    An API that returns admin user details using the JWT token
    ---
    responses:
        200:
            description: User details
            schema:
                id: user
                properties:
                    user:
                        type: dict
                        description: Details of the admin user
                        default: None    
    """    
    userId = getUserId()
    user = userDomain.getUserById(userId)

    if not user:
        return "User does not exist", 404

    return {'user': user}, 200
